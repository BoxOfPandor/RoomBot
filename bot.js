const { Client, GatewayIntentBits, EmbedBuilder, SlashCommandBuilder, REST, Routes } = require('discord.js');
const axios = require('axios');
const cheerio = require('cheerio');
const cron = require('node-cron');
require('dotenv').config();

// Configuration
const DISCORD_TOKEN = process.env.DISCORD_TOKEN;
const CLIENT_ID = process.env.CLIENT_ID;
const GUILD_ID = process.env.GUILD_ID; // Optionnel pour les commandes de guilde
const EPIROOMS_URL = process.env.EPIROOMS_URL || 'https://epirooms.eu/LIL/2';
const UPDATE_INTERVAL = process.env.UPDATE_INTERVAL || '0 * * * *';

// V√©rification des variables d'environnement obligatoires
if (!DISCORD_TOKEN || !CLIENT_ID) {
    console.error('‚ùå Variables d\'environnement manquantes:');
    if (!DISCORD_TOKEN) console.error('  - DISCORD_TOKEN');
    if (!CLIENT_ID) console.error('  - CLIENT_ID');
    console.error('Veuillez configurer le fichier .env');
    process.exit(1);
}

// Base de donn√©es en m√©moire pour stocker l'√©tat des salles
let roomsData = [];
let lastUpdate = null;

// Statuts des salles
const ROOM_STATUS = {
    0: { name: 'Inconnue', color: 0x808080, emoji: '‚ùì' },
    1: { name: 'Occup√©e', color: 0xFF4444, emoji: 'üî¥' },
    2: { name: 'Libre', color: 0x44FF44, emoji: 'üü¢' },
    3: { name: 'R√©serv√©e', color: 0xFFAA00, emoji: 'üü°' }
};

// Client Discord
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ]
});

// Fonction pour scraper les donn√©es des salles
async function scrapeRoomsData() {
    try {
        console.log('üîÑ R√©cup√©ration des donn√©es des salles...');

        const response = await axios.get(EPIROOMS_URL, {
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });

        const $ = cheerio.load(response.data);

        // Extraire les donn√©es JSON de la page
        const scriptTag = $('#__NEXT_DATA__').html();
        if (!scriptTag) {
            throw new Error('Impossible de trouver les donn√©es JSON');
        }

        const jsonData = JSON.parse(scriptTag);
        const rooms = jsonData.props.pageProps.townData.rooms;

        // Traiter les donn√©es des salles
        const processedRooms = rooms.map(room => {
            // D√©terminer le statut bas√© sur les classes CSS dans le HTML
            let status = 2; // Par d√©faut libre

            // Chercher dans le HTML les classes pour d√©terminer le statut
            const roomElements = $(`g[id*="${room.display_name}"]`);
            roomElements.each((i, element) => {
                const useElement = $(element).find('use');
                const classAttr = useElement.attr('class');

                if (classAttr) {
                    if (classAttr.includes('occupied')) status = 1;
                    else if (classAttr.includes('reserved')) status = 3;
                    else if (classAttr.includes('free')) status = 2;
                }
            });

            // Extraire les activit√©s depuis les cartes visibles
            let currentActivity = null;
            let timeSlot = null;

            const roomCard = $(`.MuiCard-root:contains("${room.display_name}")`);
            if (roomCard.length > 0) {
                const timeText = roomCard.find('p').first().text();
                const activityText = roomCard.find('p').last().text();

                if (timeText && timeText.includes('h')) {
                    timeSlot = timeText;
                    currentActivity = activityText !== timeText ? activityText : null;
                }
            }

            return {
                id: room.intra_name,
                name: room.name,
                displayName: room.display_name,
                floor: room.floor,
                seats: room.seats,
                status: status,
                currentActivity: currentActivity,
                timeSlot: timeSlot,
                lastUpdated: new Date()
            };
        });

        roomsData = processedRooms;
        lastUpdate = new Date();

        console.log(`‚úÖ ${roomsData.length} salles mises √† jour`);
        return roomsData;

    } catch (error) {
        console.error('‚ùå Erreur lors du scraping:', error.message);
        return null;
    }
}

// Fonction pour obtenir les salles par statut
function getRoomsByStatus(status) {
    return roomsData.filter(room => room.status === status);
}

// Fonction pour obtenir les salles par √©tage
function getRoomsByFloor(floor) {
    return roomsData.filter(room => room.floor === floor);
}

// Fonction pour chercher une salle par nom
function findRoom(query) {
    const searchTerm = query.toLowerCase();
    return roomsData.find(room =>
        room.displayName.toLowerCase().includes(searchTerm) ||
        room.name.toLowerCase().includes(searchTerm)
    );
}

// Commandes slash
const commands = [
    new SlashCommandBuilder()
        .setName('salles-libres')
        .setDescription('Affiche toutes les salles libres'),

    new SlashCommandBuilder()
        .setName('salles-occupees')
        .setDescription('Affiche toutes les salles occup√©es'),

    new SlashCommandBuilder()
        .setName('salle')
        .setDescription('Affiche le statut d\'une salle sp√©cifique')
        .addStringOption(option =>
            option.setName('nom')
                .setDescription('Nom de la salle')
                .setRequired(true)
        ),

    new SlashCommandBuilder()
        .setName('etage')
        .setDescription('Affiche toutes les salles d\'un √©tage')
        .addIntegerOption(option =>
            option.setName('numero')
                .setDescription('Num√©ro de l\'√©tage (0=RDC, 1=1er, 2=2√®me, 3=3√®me)')
                .setRequired(true)
                .setMinValue(0)
                .setMaxValue(3)
        ),

    new SlashCommandBuilder()
        .setName('resume')
        .setDescription('R√©sum√© de l\'occupation des salles'),

    new SlashCommandBuilder()
        .setName('refresh')
        .setDescription('Force la mise √† jour des donn√©es des salles')
];

// Gestionnaire d'√©v√©nements Discord
client.once('ready', async () => {
    console.log(`ü§ñ Bot connect√© : ${client.user.tag}`);

    // Premi√®re r√©cup√©ration des donn√©es
    await scrapeRoomsData();

    // Programmer la r√©cup√©ration automatique selon l'intervalle configur√©
    cron.schedule(UPDATE_INTERVAL, async () => {
        console.log('‚è∞ Mise √† jour automatique des salles...');
        await scrapeRoomsData();
    });

    console.log('‚úÖ Bot pr√™t et surveillance activ√©e !');
});

client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    const { commandName, options } = interaction;

    try {
        switch (commandName) {
            case 'salles-libres': {
                const freeRooms = getRoomsByStatus(2);

                if (freeRooms.length === 0) {
                    await interaction.reply('‚ùå Aucune salle libre pour le moment.');
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üü¢ Salles Libres')
                    .setColor(ROOM_STATUS[2].color)
                    .setDescription(`**${freeRooms.length}** salles disponibles`)
                    .setFooter({ text: `Derni√®re mise √† jour: ${lastUpdate?.toLocaleString('fr-FR')}` });

                // Grouper par √©tage
                const roomsByFloor = {};
                freeRooms.forEach(room => {
                    if (!roomsByFloor[room.floor]) roomsByFloor[room.floor] = [];
                    roomsByFloor[room.floor].push(room);
                });

                Object.keys(roomsByFloor).forEach(floor => {
                    const floorName = floor === '0' ? 'RDC' :
                                     floor === '1' ? '1er √©tage' :
                                     floor === '2' ? '2√®me √©tage' : '3√®me √©tage';

                    const roomsList = roomsByFloor[floor]
                        .map(room => `‚Ä¢ **${room.displayName}** (${room.seats} places)`)
                        .join('\n');

                    embed.addFields({ name: floorName, value: roomsList, inline: true });
                });

                await interaction.reply({ embeds: [embed] });
                break;
            }

            case 'salles-occupees': {
                const occupiedRooms = getRoomsByStatus(1);

                if (occupiedRooms.length === 0) {
                    await interaction.reply('‚úÖ Aucune salle occup√©e pour le moment.');
                    return;
                }

                const embed = new EmbedBuilder()
                    .setTitle('üî¥ Salles Occup√©es')
                    .setColor(ROOM_STATUS[1].color)
                    .setDescription(`**${occupiedRooms.length}** salles occup√©es`)
                    .setFooter({ text: `Derni√®re mise √† jour: ${lastUpdate?.toLocaleString('fr-FR')}` });

                occupiedRooms.forEach(room => {
                    let fieldValue = `üìç ${room.seats} places`;
                    if (room.timeSlot) fieldValue += `\n‚è∞ ${room.timeSlot}`;
                    if (room.currentActivity) fieldValue += `\nüìö ${room.currentActivity}`;

                    embed.addFields({
                        name: room.displayName,
                        value: fieldValue,
                        inline: true
                    });
                });

                await interaction.reply({ embeds: [embed] });
                break;
            }

            case 'salle': {
                const roomName = options.getString('nom');
                const room = findRoom(roomName);

                if (!room) {
                    await interaction.reply(`‚ùå Salle "${roomName}" non trouv√©e.`);
                    return;
                }

                const status = ROOM_STATUS[room.status];
                const embed = new EmbedBuilder()
                    .setTitle(`${status.emoji} ${room.displayName}`)
                    .setColor(status.color)
                    .addFields(
                        { name: 'Statut', value: status.name, inline: true },
                        { name: '√âtage', value: room.floor === 0 ? 'RDC' : `${room.floor}${room.floor === 1 ? 'er' : '√®me'}`, inline: true },
                        { name: 'Places', value: room.seats.toString(), inline: true }
                    )
                    .setFooter({ text: `Derni√®re mise √† jour: ${room.lastUpdated.toLocaleString('fr-FR')}` });

                if (room.timeSlot) {
                    embed.addFields({ name: 'Horaire', value: room.timeSlot, inline: true });
                }

                if (room.currentActivity) {
                    embed.addFields({ name: 'Activit√©', value: room.currentActivity, inline: false });
                }

                await interaction.reply({ embeds: [embed] });
                break;
            }

            case 'etage': {
                const floorNumber = options.getInteger('numero');
                const floorRooms = getRoomsByFloor(floorNumber);

                if (floorRooms.length === 0) {
                    await interaction.reply(`‚ùå Aucune salle trouv√©e √† l'√©tage ${floorNumber}.`);
                    return;
                }

                const floorName = floorNumber === 0 ? 'RDC' :
                                 floorNumber === 1 ? '1er √©tage' :
                                 floorNumber === 2 ? '2√®me √©tage' : '3√®me √©tage';

                const embed = new EmbedBuilder()
                    .setTitle(`üìç Salles - ${floorName}`)
                    .setColor(0x0099ff)
                    .setDescription(`**${floorRooms.length}** salles sur cet √©tage`)
                    .setFooter({ text: `Derni√®re mise √† jour: ${lastUpdate?.toLocaleString('fr-FR')}` });

                floorRooms.forEach(room => {
                    const status = ROOM_STATUS[room.status];
                    let fieldValue = `${status.emoji} ${status.name} - ${room.seats} places`;
                    if (room.currentActivity) fieldValue += `\nüìö ${room.currentActivity}`;

                    embed.addFields({
                        name: room.displayName,
                        value: fieldValue,
                        inline: true
                    });
                });

                await interaction.reply({ embeds: [embed] });
                break;
            }

            case 'resume': {
                const libre = getRoomsByStatus(2).length;
                const occupee = getRoomsByStatus(1).length;
                const reservee = getRoomsByStatus(3).length;
                const total = roomsData.length;

                const embed = new EmbedBuilder()
                    .setTitle('üìä R√©sum√© de l\'occupation')
                    .setColor(0x0099ff)
                    .addFields(
                        { name: 'üü¢ Salles Libres', value: libre.toString(), inline: true },
                        { name: 'üî¥ Salles Occup√©es', value: occupee.toString(), inline: true },
                        { name: 'üü° Salles R√©serv√©es', value: reservee.toString(), inline: true },
                        { name: 'üìç Total', value: total.toString(), inline: true },
                        { name: 'üìà Taux d\'occupation', value: `${Math.round((occupee / total) * 100)}%`, inline: true }
                    )
                    .setFooter({ text: `Derni√®re mise √† jour: ${lastUpdate?.toLocaleString('fr-FR')}` });

                await interaction.reply({ embeds: [embed] });
                break;
            }

            case 'refresh': {
                await interaction.deferReply();

                const result = await scrapeRoomsData();

                if (result) {
                    await interaction.editReply('‚úÖ Donn√©es des salles mises √† jour avec succ√®s !');
                } else {
                    await interaction.editReply('‚ùå Erreur lors de la mise √† jour des donn√©es.');
                }
                break;
            }
        }
    } catch (error) {
        console.error('Erreur lors de l\'ex√©cution de la commande:', error);

        if (!interaction.replied && !interaction.deferred) {
            await interaction.reply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
        } else {
            await interaction.editReply('‚ùå Une erreur est survenue lors de l\'ex√©cution de la commande.');
        }
    }
});

// Fonction pour enregistrer les commandes
async function deployCommands() {
    const rest = new REST({ version: '10' }).setToken(DISCORD_TOKEN);

    try {
        console.log('üîÑ D√©ploiement des commandes slash...');

        await rest.put(
            Routes.applicationCommands(CLIENT_ID),
            { body: commands.map(cmd => cmd.toJSON()) }
        );

        console.log('‚úÖ Commandes slash d√©ploy√©es avec succ√®s !');
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement des commandes:', error);
    }
}

// D√©marrage du bot
async function startBot() {
    try {
        await deployCommands();
        await client.login(DISCORD_TOKEN);
    } catch (error) {
        console.error('‚ùå Erreur lors du d√©marrage du bot:', error);
    }
}

// Gestion des erreurs
process.on('unhandledRejection', error => {
    console.error('‚ùå Erreur non g√©r√©e:', error);
});

// Export pour pouvoir √™tre utilis√© comme module
module.exports = { startBot, scrapeRoomsData };

// D√©marrer le bot si ce fichier est ex√©cut√© directement
if (require.main === module) {
    startBot();
}